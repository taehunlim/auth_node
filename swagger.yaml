
openapi: 3.0.0
info:
  title: Node.js Test
  description: Test
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: local test

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /account/register:
    post:
      tags:
        - user auth
      summary: Register a new user account and send a verification email
      description: The first account registered in the system is assigned the `Admin` role, other accounts are assigned the `User` role.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "lim"
                lastName:
                  type: string
                  example: "tae"
                email:
                  type: string
                  example: "limtae@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                acceptTerms:
                  type: boolean

              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - acceptTerms
      responses:
        "200":
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful, please check your email for verification instructions"

  /account/verify-email:
    post:
      tags:
        - user auth
      summary: Verfication email
      operationId: Verify-email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJpZCI6IjYwMTY1ZDcwYWViOGM5MDUyMDQwODI2ZiIsImlhdCI6MTYxMjA4NjY3MCwiZXhwIjoxNjEyMDg4NDcwfQ.BwmKXD-oo89JeFAafamwRv8GEpe3SQ7kMzzG75A2mZM"
              required:
                - token
      responses:
        "200":
          description: The verification email request was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successful verification"
        "400":
          description: The token is not valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification failed"

  /account/authenticate:
    post:
      tags:
        - user auth
      summary: authenticate
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "dsa123@naver.com"
                password:
                  type: string
                  example: "asd123"
              required:
                - email
                - password
      responses:
        "200":
          description: successful Login
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "6016829ddc7fe60b981ef11b"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "lim"
                  lastName:
                    type: string
                    example: "tae"
                  email:
                    type: string
                    example: dsa123@naver.com
                  role:
                    type: string
                    example: "user"
                  jwtToken:
                    type: string
                    example: "eyJpZCI6IjYwMTY1ZDcwYWViOGM5MDUyMDQwODI2ZiIsImlhdCI6MTYxMjA4NjY3MCwiZXhwIjoxNjEyMDg4NDcwfQ.BwmKXD-oo89JeFAafamwRv8GEpe3SQ7kMzzG75A2mZM"
                  verified:
                    type: string
                    example: "2021-01-31T10:13:58.140Z"
                required:
                  - id
                  - title
                  - firstName
                  - lastname
                  - email
                  - role
                  - verified
                  - jwtToken

        "400":
          description: Email or Password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or Password is incorrect"

  /account/forgot-password:
    post:
      tags:
        - user auth
      summary: forgot password
      operationId: forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "dsa123@naver.com"
              required:
                - email

      responses:
        "200":
          description: Please check your email for password reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please check your email for password reset"
        "400":
          description: No user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No User"

  /account/reset-password:
    put:
      tags:
        - user auth
      summary: reset password
      operationId: reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "c13d840431c2bd6ab4a6680c318f50f496137a31aadee59e820f07bb07f24421fd963bb800bcd959"
                password:
                  type: string
                  example: "asd123"
                confirmPassword:
                  type: string
                  example: "asd123"
              required:
                - token
                - password
                - confirmPassword

      responses:
        "200":
          description: successful change password, you can now log in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "successful change password, you can now log in"

        "400":
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"

  /account/:
    get:
      tags:
        - Admin
      summary: Get all user
      operationId: Get all user
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Successful get all user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "601a751c66574217b1e2624a"
                  title:
                    type: string
                    example: "mr"
                  firsName:
                    type: string
                    example: "jeremy"
                  lastName:
                    type: string
                    example: "lim"
                  email:
                    type: string
                    example: "dsa123@naver.com"
                  role:
                    type: string
                    example: "Admin"
                  verified:
                    type: string
                    example: "2021-02-03T10:10:04:45.702Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"

  /account/{userId}:
    get:
      tags:
        - Admin
      summary: Get a user by ID
      operationId: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            minimum: 1
          required: true
          description: ID of the user to get
      responses:
        "200":
          description: Successful get the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "601a751c66574217b1e2624a"
                  title:
                    type: string
                    example: "mr"
                  firsName:
                    type: string
                    example: "jeremy"
                  lastName:
                    type: string
                    example: "lim"
                  email:
                    type: string
                    example: "dsa123@naver.com"
                  role:
                    type: string
                    example: "Admin"
                  verified:
                    type: string
                    example: "2021-02-03T10:10:04:45.702Z"

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"

  /blog/write:
    post:
      tags:
        - Admin
      summary: blog posting
      description: Only admin can upload
      operationId: blog posting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Chic Fashion Phenomenon"
                content:
                  type: string
                  example: "Michele seemed to say, was the 21st-century Gucci girl, an eccentric, fresh-faced weirdo who wasn’t afraid to wear backless fur-lined loafers, to personify the idea of “ugly pretty.”"
                image:
                  type: string
                  example: "https://user-images.githubusercontent.com/54699548/108054435-fe109300-7091-11eb-9a41-84a6d9407b4f.png"
                comments:
                  type: string
                datePublished:
                  type: string
                  example: "2021-02-17T07:43:02.638Z"

              required:
                - title
                - content

      responses:
        "200":
          description: Successful upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "23y78f6sd8f77876sdf"
                  title:
                    type: string
                    example: "Chic Fashion Phenomenon"
                  content:
                    type: string
                    example: "Michele seemed to say, was the 21st-century Gucci girl, an eccentric, fresh-faced weirdo who wasn’t afraid to wear backless fur-lined loafers, to personify the idea of “ugly pretty.”"
                  image:
                    type: string
                  comments:
                    type: string
                    example: "[]"
                  datePublished:
                    type: string
                    example: "2021-02-17T08:07:04.242Z"

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"

  /blog:
    get:
      summary: Get post
      operationId: Get post
      tags:
        - Blog
      responses:
        "200":
          description: Successful get post
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "601a751c66574217b1e2624a"
                  title:
                    type: string
                    example: "test Title"
                  content:
                    type: string
                    example: "<p>Test Content</p>"
                  image:
                    type: string
                    example: "blob:http://localhost:3000/43997b9f-9139-4906-ac44-195fa6806c39"
                  comments:
                    type: string
                    example: []
                  datePublished:
                    type: string
                    example: "2021-02-19T11:42:06.077+00:00"
